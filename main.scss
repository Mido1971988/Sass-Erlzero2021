// import global rules
@use "./sass/layout/global-rules";

// import contact
@use "./sass/pages/contact";

// import variables
// @use "./sass/variables/colors" as *;
@use "./sass/variables/colors";


// @for $i from 1 through 50{
//     .class-#{$i}{
//         font-size: 10px + $i;
//     }
// }

:root { 
    --main-color : red;
}

//Global Variable
$alt-color : green;

header{
    background-color: var(--main-color);
    background-color: $alt-color;
}

footer{
    // local variable 
    $alt-color: black;
    color:$alt-color
}

sidebar{
    // background-color: $main;
    // color: $alt;
    background-color: colors.$main;
    color: colors.$alt;
}

// Nesting & Parent Element

.parent {
    font-weight: bold;
    .child {
        font-size: 20px;
    .grand-child {
        font-size: 15px;
        }
    }
}

.parent-one,
.parent-two {
    padding: 20px;
    .child {
        padding: 10px;
    }
}

.parent > {
    .child {
        font-size: 20px;
    }
    .test {
        font-weight: bold;
    }
}

.parent {
    > .child {
        font-size: 20px;
    }
    .test {
        font-weight: bold;
    }
    + p {
        font-size: 15px;
    }
}

.parent {
    > {
        .element-one {
        font-size: 10px;
        }
        .element-two {
        font-size: 10px;
        }
    }
    .not-direct-child {
        font-weight: bold;
    }
}

.box {
    .title {
        font-size: 10px;
    }
    .description {
        font-size: 8px;
    }
    &.red {
        color: red;
    }
    &.green {
        color: green;
    }
    &:hover {
        background-color: #eee;
    }
    &:hover .title {
        font-weight: bold;
    }
    :not(&) {
        font-weight: normal;
    }
    [dir="rtl"] & {
        direction: rtl;
    }
}

// Property Declarations And Placeholder

// font and margin shorthand grouping
.box {
    font-size: 20px;
    font: {
        size: 15px;
        weight: bold;
    }
    padding: 10px;
    margin: auto {
        top: 10px;
        bottom: 15px;
    }
}

// you can use .main-box if you need it as class for element 
// but if you will not use it on element you can use placeholder by using %
%main-box {
    background-color: white;
    padding: 15px;
    border: 1px solid #ccc;
}

// @extend means will copy css from %main-box and put it here also
.ads {
    @extend %main-box;
    font-size: 20px;
    color: red;
}

.article {
    font-size: 22px;
    @extend %main-box;
    color: green;
}

// Assignments from 1 to 6 Lesson 

// assignmet 1 :

.content{
    > .box{
        padding: 15px;
        > .title{
            font-size: 18px;
        }
    }
    .cat{
        padding: 15px;
    }
    &.premium::before{
        content: "Premium Box";
    }
    &.premium::hover{
        background-color: #eee;
    }
}

// assignment 2 : 
.class {
    > .child{
        padding: 10px;
    }
}

// assignment 3 :
.class{
    font: {
        weight: bold;
        size: 20px;
    }
}

// assignment 4
.parent {
    & + .sibling {
        margin: auto {
        top: 10px;
    }
    & ~ .last {
        padding: 10px;
        }
    }
}

// assignment 5

.widget {
    background-color: white;
    padding: 20px;
}
.main-border {
    border: 1px solid #CCC
}
.my-class {
    @extend .widget;
    @extend .main-border;
    font-weight: bold;
    margin: 20px auto;
}

// assignment 6

%widget {
    background-color: white;
    padding: 20px;
}
%main-border {
    border: 1px solid #CCC;
}
.my-class {
    font-weight: bold;
    margin: 20px auto;
    & {
        @extend %widget;
        @extend %main-border;
    }
} 

// assignment 7
.box{
    h2 , p{
        font-size: 20px;
    }
}

@media(max-width:575px){
    .box {
        h2 , p{
            font-size: 16px;
            span{
                font-weight: bold;
            }
        }
    }
}

// assignment 8

$red: #e91e63;
$green: #009688;

// Add What You Want Here
$link-color : $red;
$link-hover : $green;

// Do Not Edit Here
.box a {
    color: $link-color;
    &:hover {
        color: $link-hover;
    }
}

// assignment 9
// assignment 10
box {
    font-size: 20px;
    &-holder {
        width: 1000px;
    &-content {
        margin: auto;
        }
    }
}

// Control Flow => If And Else

$theme: "light";

.page {
    @if $theme == "light" {
        background-color: white;
        color: #444;
    } @else if $theme == "dark" {
        background-color: #444;
        color: white;
    } @else {
        @error " #{$theme} is Invaild Theme "
    }
}

$rounded: false;

.box {
    @extend %main-box;
    // 6px if $rounded is true if false will be null and sass will not write border-radius 
    // if value is null so you will not find .box in css file
    border-radius: if($rounded, 6px, null);
}

// Interpolation ( same like  template literals ${} ) you can use variable or function
$company: "falcon";
$position: "right";

.ad-#{$company}-#{unique-id()} {
    font-size: 20px;
    background-image: url("imgs/#{$company}.png");
    #{$position}: 0;
}
.ad-#{unique-id()} {
    font-weight: bold;
}

// Comments

// This Comment Will Not Show In CSS File

/* This Comment Will Show In CSS File But Not In Compressed Mode */

/*! This Comment Will Show In CSS File And In Compressed Mode */

.box /* Multiple
Lines
Comment */ {
  font-size: 20px; // Inline Comment
}

/* This Comment Contains Interpolation => #{$company} */

// to write documentation
/// Function To Do Bla Bla Bla
///
/// @param {num}
/// The Number To Deal With
/// @return {int}



// assignment from 7 to 10 Lessons 

//assignment 1
$main: "school";
$child: "box";
$language: "en"; // English
$gap: 20px;


.school {
    padding: $gap;
    direction: if($language , ltr , rtl);
    margin-left: $gap;
    .#{$main}-#{$child}{
        padding: calc($gap / 2);
    }
    &::hover .#{$main}-#{$child}{
        background-color: #eee;
    }
}

//assignment 2

$main-color: red;
$alt-color: blue;

/* Theme Version: 1.0 */
/* Website Theme Main Color Is: #{$main-color} */
/* Website Theme Alternate Color Is: #{$alt-color}  */

// assignment 3
// SASS Code
$number: 4;

.class {
    color: if($number > 8 , blue , null);
}
.class {
    color: if($number > 5 , green , red);
}

// assignment 4
// SASS Code
$number: 10;
$color: red;
$theme: light;

// Write If Condition Code Here

// Output
.class {
    @if ( $number > 5 and $color == red and not ($theme == dark)) {
        color: red;
    }
    
}

// assignment 5
$number : 10;
.box{
    @if $number == 10 or $number == 9 {
        background-color: if($number == 10 or $number == 9 , #eee , null);
        text-align: if($number == 8 or $number == 9 , null , center);
    } 
}

// Mixin And Include

@mixin list-reset {
    padding: 0;
    margin: 0;
    list-style: none;
}

@mixin circle($dimensions) {
    border-radius: 50%;
    width: $dimensions;
    height: $dimensions;
}

@mixin centering {
    display: flex;
    justify-content: center;
    align-items: center;
}


ul.links {
    @include list-reset;
}

.circle-100 {
    @include circle(100px);
    background-color: red;
    color: white;
}

.circle-200 {
    @include circle(200px);
    background-color: red;
    color: white;
}

.center-circle {
    @include circle(400px);
    @include centering;
}

// Loop => For

@for $i from 1 through 10 {
    .class-#{$i} {
        font-size: #{$i + 10px};
    }
}

$dimensions: 0;

@for $i from 1 through 10 {
    .circle-#{100 + $dimensions} {
      // you can use + without calc() in sass
        width: $dimensions + 100px;
        height: $dimensions + 100px;
        border-radius: 50%;
    }
    $dimensions: $dimensions + 100;
}

// Each + Maps

$themes: red, green, blue, orange;

@each $theme in $themes {
    .#{"" + $theme}-theme {
        .product {
            background-color: white;
            border-bottom: 2px solid $theme;
        .title {
            color: $theme;
            font-weight: bold;
        }
    }
    }
}

$socials: (
    "facebook": blue,
    "youtube": red,
    "github": black,
    "twitter": indianred,
);

// like for..in loop on objects
@each $name, $color in $socials {
    .#{$name} {
        background-color: $color;
        color: white;
        &::before {
            content: $name;
        }
    }
}

$classes: "one" 20px red, "two" 15px green, "three" 22px blue;

  // like destructuring
@each $class, $font, $color in $classes {
    .#{$class} {
        font-size: $font;
        background-color: $color;
        color: white;
        padding: calc($font / 2);
    }
}
// Loop => While

$start: 1;

@while $start <= 10 {
    .width-#{$start * 100} {
        width: $start * 100px;
        height: calc(($start * 100px) / 2);
    }
    $start: $start + 1;
}

// Create Grid System

$grid_cols: 12;

@for $i from 1 through $grid_cols {
    .col-#{$i} {
        width: percentage(calc($i / $grid-cols));
    }
}

// Assignment from 11 to 15 Lessons

//assignmet 1
@mixin arrow($direction){
    content: "";
    position: absolute;
    border: 20px solid transparent;
    @if($direction == "top"){
        transform: translateX(-50%);
        left: 50%;
        top: -40px;
        border-bottom-color: red;
    }@else if($direction == "right"){
        transform: translateY(-50%);
        right: -40px;
        top: 50%;
        border-left-color: red;
    }@else if($direction == "bottom"){
        transform: translateX(-50%);
        left: 50%;
        bottom: -40px;
        border-top-color: red;
    }@else if($direction == "left"){
        transform: translateY(-50%);
        top: 50%;
        left: -40px;
        border-right-color: red;
    }
    
}
.element {
    &:before {
        @include arrow("right");
    }
}

// assignmet 2
$grid_cols: 16;

@for $i from 1 through $grid_cols {
    .col-#{$i} {
        width: percentage(calc($i / $grid-cols));
    }
}

// assignmet 3
$names:
    "books" 20px red 18,
    "games" 30px green 18,
    "dvds" 20px blue;

@each $name , $padding , $color , $font in $names {
    .#{$name} {
        padding: $padding;
        font-size: if($font , $font , 16px);
        border-bottom: 2px solid $color;
        color: #444;
    }
}

// assignment 4
$init: 1;

@while $init <= 10 {
    .circle-#{$init * 100} {
        width: $init * 100px;
        height: $init * 100px;
        border-radius: calc(($init * 100px) / 2);
    }
    $init: $init + 1;
}

// assignment 5

@for $i from 1 through 10 {
    .circleFor-#{$i * 100} {
        width: $i * 100px;
        height: $i * 100px;
        border-radius: calc(($i * 100px) / 2);
    }
}

// assignment 6 

@mixin placeholder{
    @each $vendor in ('.placeholder', ':-moz-placeholder', '::-moz-placeholder', ':-ms-input--placeholder', ':-webkit-input--placeholder') {
        textarea#{$vendor}{color : #777};
    };
}

@include placeholder;

// assignment 7
// Write Mixin Code Here
@mixin flex-center($width:400px){
    display: flex;
    justify-content: center;
    align-items: center;
    width: $width;
}
// Using
.box-one {
    @include flex-center(500px);
}
.box-two {
    @include flex-center;
}

// Function

@function half($size) {
    @return $size / 2;
}

@function calculate($sizes...) {
    $total: 0;
    @each $size in $sizes {
        $total: $total + $size;
    }
    @return $total;
}

$width: 200px;

.element {
    width: $width;
    height: half($width);
    top: calculate(100px, 200px, 50px);
}

// Mixin With Content

// content written when you create mixin
@mixin overlay($color, $opacity) {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba($color, $opacity);
}

.black-overlay {
    @include overlay(black, 0.5);
}

// content will be written when you invoke the mixin
@mixin keyF($anim-name) {
    @-webkit-keyframes #{$anim-name} {
        @content;
    }
    @keyframes #{$anim-name} {
        @content;
    }
}

@include keyF(fade-in) {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
    }
    @include keyF(go-up) {
    from {
        bottom: 0;
    }
    to {
        bottom: 100px;
    }
}

// Mixin with media quieries practice : 
@mixin breakpoints($point) {
    @if $point == mobile {
            @media (max-width: 767px) {
                @content;
            }
        } @else if $point == small {
            @media (min-width: 768px) and (max-width: 991px) {
                @content;
            }
        } @else if $point == medium {
            @media (min-width: 992px) and (max-width: 1199px) {
                @content;
            }
        } @else if $point == large {
            @media (min-width: 1200px) {
                @content;
            }
    }
}

.media {
    @include breakpoints(mobile) {
        font-size: 15px;
    }
    @include breakpoints(small) {
        font-size: 18px;
    }
    @include breakpoints(medium) {
        font-size: 20px;
    }
    @include breakpoints(large) {
        font-size: 22px;
    }
}

// assignment 16 to 19 

$num: 2;
$start: 100;

@function double($size) {
  @return $size * $num;
}

@for $i from 1 through 5 {
    .box-#{$start}{
        width: $start;
        height: double($start);
    }
    $start : double($start)
}

// assignment 2
@function get-total($nums...){
    $total : 0;
    @each $num in $nums{
        $total : $total + $num
    }
    @return $total
}
.box {
    top: get-total(100, 50, 20);
    right: get-total(100, 50);
}
